This was seen in the first few lines of logs on IOS:
Available orientation: KIVY_ORIENTATION=LandscapeLeft LandscapeRight Portrait PortraitUpsideDown

The basic camera demo has an issue such that the app and buttons are in portrait, but the camera view as you see it
out the lens looks like the phone has been tilted 90 degrees to the right. I'm gonna say that the widget showing the
camera or the image in that widget is LandscapeRight
* But I don't know the left/right convention used and it is totally subjective as to how it might be defined.
** It is accurate (and not subjective) to say that currently the image of what is in front of the camera
   looks like the camera itself was rotated to the RIGHT 90s.

One more thing that is weird at the moment is that the image is wide horizontally which goes with landscape mode
(which is what the image rotation looks like .. landscape since it is 90 degs off of portrait) .. and you have
a large amount  (over 50%) of the usable screen space for image is just black because of the portrait/landscape
mismatch between the phone's physical orientation and the orientation of BOTH the portal/view AND the image content.

One might say that the image data is correct for the widget/portal, but the widget itself is misaligned (incorrectly
rotated 90 degrees to the LEFT AS IT IS VIEWED .. implying a camera that was rotated to the right.
(See, it is very subjective. The answer is to just try rotating the widget itself 90 one way or the other. .. and
maybe also specifying the shape .. which might all be embodied in LandscapeLeft vs LandscapeRight. (defined uniquely
to each device/platform perhaps.)

---------------------------
FIX:
The camera and portal orientation has been fixed but there remains excessive padding which I think should be easy to
fix.
Before orientation/rotation fix:
    Camera:
        id: camera
        resolution: (640, 480)
        play: False

With FIX in place:
    Camera:

        id: camera
        resolution: (640, 480)
        play: False
        canvas.before:
            PushMatrix
            Rotate:
                angle: -90
                origin: self.center
        canvas.after:
            PopMatrix

ABOUT CANVAS ROTATION:
https://kivy.org/doc/stable/examples/gen__canvas__rotation__py.html
------------------------------------
Found a posting that shows the equivalent using python code and also mentions some general Kivy/python info about
lookups to translate the one.two.three.four dotted notation of imports .. and a performance optimization that might
be important to some projects.

Relevant snippets from posting - compare with similar kv code above. (But I don't see a PopMatrix(). Needed?)

import kivy.graphics ? or import kivy graphics * etc?

        with self.canvas.before:
            kivy.graphics.context_instructions.PushMatrix()
            kivy.graphics.context_instructions.Translate(*origin)
            kivy.graphics.context_instructions.PushMatrix()
            kivy.graphics.context_instructions.Rotate(angle=self.angle)

Performance optimized variant .. applies in general to ALL kinds of code in Kivy and other contexts. The issues is
that the dot name parts are ALL looked up on every occurrance/iteration UNLESS you stick the looked=up reference
equivalents into a var with a simple assignment, such as:

kivy_graphics_context_instructions = kivy.graphics.context_instructions
        with self.canvas.before:
            kivy_graphics_context_instructions.PushMatrix()
            kivy_graphics_context_instructions.Translate(*origin)
            kivy_graphics_context_instructions.PushMatrix()
            kivy_graphics_context_instructions.Rotate(angle=self.angle)

NOTE: It's also exposed in the graphics module, from kivy.graphics import PushMatrix
* I guess this note means this would work
