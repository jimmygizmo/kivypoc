TODO: Double check on usage of 3.7.10. I was watching the log of the very big build of kivy-ios (toolchain build kivy)
and I saw something install Python 3.8.2. I also saw Python 3.8 in other build info and did not notice any other
Python versions. Not explicitly confirmed yet but 3.7 info looks like it is probably outdated.
The main instructions I am currently following are from https://kivy.org/doc/stable/guide/packaging-ios.html
but the mention of Python version is only on a web page not in one place and could easily be outdated info.
TODO: Plan to change to Python 3.8.2 for the kivypoc venv. Will need to install this with Pyenv and we will no
longer need 3.7
CLARIFICATION: Once built and deployed using Kivy-IOS, your Python code will be running there under Python 3.8.2
and you cannot easily or not at all control this version. So that your IDE and local testing is appropriate, this
is why you want your local virtual environment to exactly match the version you will be deploying with.
TODO: Re-write this entire doc to incorporate this clarification and the updated version info.
- - - - - - - -
IDE TIP:
I use many JetBrains Pro IDEs/tools and specifically PyCharm for Python dev.
Like most IDEs, you do not want the IDE trying to index massive amounts of files it absolutely does not need to
index .. or you will be heating up your CPU and slowing down your machine quite a lot and unnecessarily.
In PyCharm, you can 'Exclude' entire directories. This is why some directories like well-known build output dirs
show up red. In the case of Kivy-POC, after the build, you will want to do two things for this situation:
1. Exclude the following dirs which the kivy-poc added to the project root: .cache, build, dist.
2. File -> Invalidate Caches...
Study up on this stuff to learn why it is important. You do not want your IDE indexing and caching massive amounts of
info it absolutely should not be indexing (usually this means build output.) The difference can be huge. Don't abuse
your hardware with overheating and make your IDE and computer sluggish because of such a simple issue. As a developer
you should know all about this stuff anyhow. Know your tools and optimize them. I highly recommend the JetBrains pro
license for all serious developers. This is $150,000 per year work, or a lot more. Pony up the $100-$200/year for an
excellent set of tools. I am not affiliated; I have just worked with a lot of IDEs for a long time.
I use JetBrains PyCharm, CLion, WebStorm, DatGrip and sometimes IDEA on a daily basis. Each tool is outstanding and
really can't be beat by anything .. meaning although VSCode is great, you get WAY more with the JetBrains pro suite.
Also, it is nice that all of these tools feel the same and have similar menus, layout, updating and even code base,
under one proven company with a strong financial incentive to KEEP everything going right. Well worth the money.
- - - - - - - -

This page details building and deploying for IOS:
https://kivy.org/doc/stable/guide/packaging-ios.html

It mentions that kivy-IOS builds packages with Python 3.7.
I was tending towards using the latest Python 3.9.5 for everything I can, but I use Pyenv to manage my Python
versions and I use Pyenv-virtualenv to manage virtual envs created under those Python installations.
If you are not using Pyenv, you have no good way to manage projects using different Python versions. Using containers
can help but it involves more effort and can't easily address all needs.
Especially on MacOS, if you are not using Pyenv yet, I strongly suggest you check it out.

------------------------------------------------------------------------------------------------------------------------
Before, learning of this requirement for the older Python version of 3.7, my fresh new Pyenv and Pyenv-Virtualenv
set up looked like this:

(kivypoc) ➜  pong git:(main) ✗ pyenv versions
  system
  2.7.18
  3.9.5
  3.9.5/envs/kivypoc
* kivypoc (set by /Users/bilbo/GITREPOS/kivypoc/.python-version)


------------------------------------------------------------------------------------------------------------------------
I will continue using Python 3.9.5 for most projects, but I have now also installed Python 3.7 and gotten rid of the
initial 'kivypoc' Python 3.9.5 virtual environment. I created a new one based off of the latest  Python 3.7 version.
The specific Python 3.7 version I will be using is the last before it went to 3.8 and is 3.7.10.

This is all now in place and now my 'pyenv versions' is like this:

(kivypoc) ➜  pong git:(main) ✗ pyenv versions
  system
  2.7.18
  3.7.10
  3.7.10/envs/kivypoc
  3.9.5
* kivypoc (set by /Users/bilbo/GITREPOS/kivypoc/.python-version)
(kivypoc) ➜  pong git:(main) ✗

You can see that I already have a .python-version file in place, specifying this directory (and everything below
it by default) will have the 'kivypoc' virtual environment active, which is using Python 3.7.10.

One more bit of illustrative confirmation that our Python environment is correct:

(kivypoc) ➜  pong git:(main) ✗ python -V; python2 -V; python3 -V;
Python 3.7.10
Python 2.7.16
Python 3.7.10

------------------------------------------------------------------------------------------------------------------------

The .python-version file in the root of the 'kivypoc' project directory causes Pyenv to activate the 'kivypoc'
virtual environment and thus the 'python' and 'python3' commands will invoke Python 3.7.10 and NOT Python 3.9.5.
Python 3.9.5 is my default I set globally. Our current work will not involve python 2 or the use of the 'python2'
command. The contents of the .python-version file, set manually or via 'pyenv local' are simply a
single line containing 'kivypoc'.
This project-specific virtual environment will come with a clean slate for installed 'site-packages' modules,
which of course is the primary purpose of a virtual environment. The modules needed by this project will be listed
in requirements.txt file when the project reaches stable milestones, a version-pinned variant of the requirements.txt
file will be also be introduced and maintained so control of when/what module upgrades remains under your control.
If you don't maintain a pinned version of your requirements.txt file, any module can upgrade and introduce change
at anytime and it can be inconvenient to address after the fact. Use an unpinned (no versions specified) variant
for when you are looking for upgrades to consider, testing those upgrades, doing major development work,
troubleshooting or experimenting etc. but then restore the usage of the version-pinned requirements.txt file
in which every single dependent module (AND ALL OF THE CHILD DEPENDENCIES DISCOVERED THROUGH PIP FREEZE) are ALL
specified with the exact version. This gives you the most control and any lesser methodology exposes you to change
outside of your control and the potential for random, mysterious bugs. In technology, only the paranoid survive.
So the result is that your normal requirements.txt file will have far fewer modules listed than your
pip-freeze-generated, version-pinned 'pinned-requirements.txt' file. When versions DO change, be sure to do the
appropriate extra testing and then also note all the details of the change and the implications in your commit
comments and elsewhere as appropriate.

-----------------------------------------------------------------------------------------------------------------------

TODO: Combine this file with: dev-env-setup.txt

-------------
MISC NOTES:
Cython version can also be determined like this:
>>> print(Cython.__version__)
0.29.23
And via pip freeze, it is the same:
Cython==0.29.23

------------------------------------------------------------------------------------------------------------------------

I highly recommend reading the overview of Cython, if you are new to it. Its greatest benefits are allowing tight
integration with C libraries (our primary interest in this case) and enabling Python to enjoy sometimes extreme
performance improvements through static typing and other features. C compiler and additional dev/build steps required.
I have seen Cython used successfully for big performance improvements in major commercial apps, which were also stable.
Cython overview: https://cython.readthedocs.io/en/latest/src/quickstart/overview.html

The following is also relevant with respect to how you import and use Cython.
Cython + setuptools build process:
https://docs.python.org/3/distributing/index.html
This will show you how to write a setup.py file which is a general skill that all Python developers should have,
but specifically will be relevant for deploying Kivy apps to IOS devices. TODO: Clarify this and the exact role.

------------------------------------------------------------------------------------------------------------------------
BUILD AND DEPLOY TO IPHONE STEPS:

1. ######## CREATE THE DISTRIBUTION (python + modules for IOS)
pip install kivy-ios (we already have it in our requirements.txt and our kivypoc virtualenv)

toolchain build kivy
* This is a VERY LARGE AND COMPLEX build. It takes a long time (20-30 minutes or more) and your CPU will heat up.
There are many phases to the build. Many things will be downloaded. I was concerned it would ultimately succeed,
but it did. I would call this the Kivy IOS runtime, which does not yet have any of your project code in it.
I think that the following steps will use Xcode to combine your project Python code with this runtime.
TODO: Would be good to detail all that it is building/doing. And to take another pass at the above once more is
  learned since some of these points are assumptions.




2. ######## CREATE AN XCODE PROJECT (and link your source code)




3. ######## UPDATE THE XCODE PROJECT




4. ######## CUSTOMIZE THE XCODE PROJECT





##
#

